// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is TikTokFlutterSDKError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class TikTokFlutterSDKError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class AuthMethod(val raw: Int) {
  CHROME_TAB(0),
  TIK_TOK_APP(1);

  companion object {
    fun ofRaw(raw: Int): AuthMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
private open class TikTokSDKPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AuthMethod.ofRaw(it.toInt())
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AuthMethod -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TikTokSDK {
  fun authorize(clientKey: String, scope: String, redirectUri: String, codeVerifier: String, autoAuthDisabled: Boolean, state: String?, language: String?, authMethod: AuthMethod): Boolean

  companion object {
    /** The codec used by TikTokSDK. */
    val codec: MessageCodec<Any?> by lazy {
      TikTokSDKPigeonCodec()
    }
    /** Sets up an instance of `TikTokSDK` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: TikTokSDK?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.tiktok_flutter_sdk.TikTokSDK.authorize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val clientKeyArg = args[0] as String
            val scopeArg = args[1] as String
            val redirectUriArg = args[2] as String
            val codeVerifierArg = args[3] as String
            val autoAuthDisabledArg = args[4] as Boolean
            val stateArg = args[5] as String?
            val languageArg = args[6] as String?
            val authMethodArg = args[7] as AuthMethod
            val wrapped: List<Any?> = try {
              listOf(api.authorize(clientKeyArg, scopeArg, redirectUriArg, codeVerifierArg, autoAuthDisabledArg, stateArg, languageArg, authMethodArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
